version: 2.1
orbs:
  #codecov: codecov/codecov@4.1.0
  win: circleci/windows@5.0

executors:
  lint:
    docker:
      - image: ethereum/cpp-build-env:22-lint
    resource_class: small
    environment:
      CMAKE_BUILD_PARALLEL_LEVEL: 2
  linux-gcc-latest:
    docker:
      - image: ethereum/cpp-build-env:22-gcc-14
    environment:
      CMAKE_BUILD_PARALLEL_LEVEL: 4
  linux-gcc-multilib:
    docker:
      - image: ethereum/cpp-build-env:22-gcc-14-multilib
    resource_class: small
    environment:
      CMAKE_BUILD_PARALLEL_LEVEL: 2
  blockchain-tests:
    docker:
      - image: ethereum/cpp-build-env:19-gcc-12
    # resource_class: xlarge
    resource_class: small
    environment:
      CMAKE_BUILD_PARALLEL_LEVEL: 8
  linux-clang-xlarge:
    docker:
      - image: ethereum/cpp-build-env:22-clang-18
    # resource_class: xlarge
    resource_class: small
    environment:
      CMAKE_BUILD_PARALLEL_LEVEL: 8
  linux-clang-2xlarge:
    docker:
      - image: ethereum/cpp-build-env:21-clang-17
    #resource_class: 2xlarge
    resource_class: small
    environment:
      # CMAKE_BUILD_PARALLEL_LEVEL: 16
  linux-gcc-min:
    docker:
      - image: ethereum/cpp-build-env:17-gcc-11
    resource_class: small
    environment:
      CMAKE_BUILD_PARALLEL_LEVEL: 2
  linux-clang-latest:
    docker:
      - image: ethereum/cpp-build-env:22-clang-18
    environment:
      CMAKE_BUILD_PARALLEL_LEVEL: 4
  linux-clang-min:
    docker:
      - image: ethereum/cpp-build-env:19-clang-15
    resource_class: small
    environment:
      CMAKE_BUILD_PARALLEL_LEVEL: 2
  linux-base:
    docker:
      - image: cimg/base:edge-22.04
    resource_class: small
    environment:
      CMAKE_BUILD_PARALLEL_LEVEL: 2
  macos:
    resource_class: macos.m1.medium.gen1
    #resource_class: macos.m1.large.gen1
    macos:
      xcode: 15.4.0
    environment:
      CMAKE_BUILD_PARALLEL_LEVEL: 8
  macos-xcode-min:
    resource_class: macos.m1.medium.gen1
    macos:
      xcode: 15.0.0
    environment:
      CMAKE_BUILD_PARALLEL_LEVEL: 4

commands:
  install_cmake:
    parameters:
      version:
        type: string
    steps:
      - run:
          name: "Install CMake <<parameters.version>>"
          working_directory: /usr/local
          command: |
            curl -L https://github.com/Kitware/CMake/releases/download/v<<parameters.version>>/cmake-<<parameters.version>>-linux-x86_64.tar.gz | sudo tar -xz --strip=1

  checkout_submodules:
    steps:
      - run:
          name: "Update submodules"
          command: git submodule update --init --recursive

  build_silkworm:
    parameters:
      branch:
        type: string
        default: master
      commit:
        type: string
    steps:
      - run:
          # Fix fixes the cache restore step in case the silkworm dir does not exist
          name: "Make Silkworm dir"
          command: mkdir -p ~/silkworm
      - restore_cache:
          name: "Restore Silkworm cache (<<parameters.branch>>-<<parameters.commit>>)"
          key: &silkworm-cache-key silkworm-v2-<<parameters.branch>>-<<parameters.commit>>
      - run:
          name: "Check Silkworm cache"
          command: |
            if [ -f ~/silkworm/consensus ]; then
              echo 'Cached Silkworm binary available - skip build.'
            else
              echo 'export SILKWORM_BUILD=true' >> $BASH_ENV
            fi
      - run:
          name: "Install build dependencies"
          command: |
            sudo apt-get -q update && sudo apt-get -qy install --no-install-recommends binutils m4 texinfo
      - run:
          name: "Checkout Silkworm"
          working_directory: ~/silkworm/src
          command: |
            [ "$SILKWORM_BUILD" = true ] || exit 0
            git clone --no-checkout --single-branch https://github.com/torquem-ch/silkworm.git . --branch <<parameters.branch>>
            git checkout <<parameters.commit>>
            git submodule update --init --recursive --progress
      - run:
          name: "Configure Silkworm"
          working_directory: ~/silkworm
          command: |
            [ "$SILKWORM_BUILD" = true ] || exit 0
            cmake -S src -B build -DCMAKE_BUILD_TYPE=Release -DHUNTER_CONFIGURATION_TYPES=Release -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=$(pwd)
      - run:
          name: "Build Silkworm cmd/consensus"
          working_directory: ~/silkworm
          command: |
            [ "$SILKWORM_BUILD" = true ] || exit 0
            cmake --build build --target consensus
      - save_cache:
          name: "Save Silkworm cache"
          key: *silkworm-cache-key
          paths:
            - ~/silkworm/consensus

  download_execution_tests:
    parameters:
      rev:
        type: string
        default: develop
      commit:
        type: string
        default: ""
    steps:
      - run:
          name: "Download execution tests: <<parameters.rev>> <<parameters.commit>>"
          working_directory: ~/tests
          command: |
            git clone --no-checkout --depth=250 --single-branch https://github.com/ethereum/tests . --branch <<parameters.rev>>
            <<#parameters.rev>>git checkout <<parameters.rev>><</parameters.rev>>
            <<#parameters.commit>>git checkout <<parameters.commit>><</parameters.commit>>
            git submodule update --init --recursive --depth=1 --progress

  build:
    description: "Build"
    steps:
      - checkout
      - checkout_submodules
      - run:
          name: "Environment"
          command: |
            CC=${CC:-cc}
            CXX=${CXX:-cpp}
            echo CC: $CC
            echo CXX: $CXX
            $CC --version
            $CXX --version
            cmake --version
            echo CMAKE_BUILD_PARALLEL_LEVEL: $CMAKE_BUILD_PARALLEL_LEVEL

            # Create the build.info file for cache key.
            echo $TOOLCHAIN >> build.info
            echo $CMAKE_OPTIONS >> build.info
            $CXX --version >> build.info
            
            printf '\n-----------\nbuild.info:\n'
            cat build.info
      - restore_cache:
         name: "Restore Hunter cache"
         key: &hunter-cache-key hunter-{{arch}}-{{checksum "build.info"}}-{{checksum "cmake/Hunter/init.cmake"}}-{{checksum "cmake/Hunter/config.cmake"}}
      - run:
          name: "Configure"
          working_directory: ~/build
          command: |
            if [ "$TOOLCHAIN" ]; then
              export toolchain_option="-DTOOLCHAIN=$TOOLCHAIN"
            fi
            cmake ../project $toolchain_option -DCMAKE_INSTALL_PREFIX=~/install -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DEVMONE_TESTING=ON $CMAKE_OPTIONS
      - save_cache:
         name: "Save Hunter cache"
         key: *hunter-cache-key
         paths:
           - ~/.hunter/_Base/Cache
      - run:
          name: "Build"
          command: cmake --build ~/build
      - run:
          name: "Install"
          command: cmake --build ~/build --target install

  test:
    description: "Test"
    steps:
      - run:
          name: "Test"
          shell: bash
          working_directory: ~/build
          command: ctest -R ${TESTS_FILTER:-'.*'} --schedule-random --output-on-failure --parallel $CMAKE_BUILD_PARALLEL_LEVEL --output-junit ~/test_results/evmone.xml
      - store_test_results:
          path: ~/test_results

  collect_coverage_gcc:
    description: "Collect coverage data (GCC)"
    steps:
      - run:
          name: "Collect coverage data (GCC)"
          working_directory: ~/build
          # Use coveralls to eliminate branch stats (they need more work)
          command: |
            mkdir -p ~/coverage
            gcovr --filter ~/project --coveralls coverage.json --html ~/coverage/coverage.html --html-nested ~/coverage/coverage.html
      - store_artifacts:
          path: ~/coverage
          destination: coverage

  # upload_coverage:
  #   description: "Upload coverage data"
  #   parameters:
  #     flags:
  #       type: string
  #   steps:
  #     - codecov/upload:
  #         upload_args: --plugin noop
  #         file: ../build/coverage.json
  #         flags: <<parameters.flags>>

  package:
    description: "Make package"
    steps:
      - run:
          name: "Build Package"
          shell: bash
          working_directory: ~/package
          command: cmake --build ~/build --target package && mv ~/build/evmone-*.* .
      - store_artifacts:
          path: ~/package
          destination: package
      - persist_to_workspace:
          root: ~/package
          paths:
            - evmone-*

  unpack_package:
    steps:
      - attach_workspace:
          at: ~/package
      - run:
          name: "Unpack evmone"
          working_directory: ~/package
          command: tar xz < evmone*.tar.gz

jobs:

  lint:
    executor: lint
    steps:
      - checkout
      - run:
          name: "Check code format"
          command: |
            clang-format --version
            find include lib test -name '*.hpp' -o -name '*.cpp' -o -name '*.h' -o -name '*.c' | xargs clang-format -i
            git diff --color --exit-code
      - run:
          name: "Check spelling"
          command: |
            codespell --quiet-level=4 --skip=.git

  release-linux:
    executor: linux-gcc-latest
    environment:
      BUILD_TYPE: Release
    steps:
      - build
      - test
      #- run:
      #    name: "Export JSON tests"
      #    working_directory: ~/package
      #    command: tar -C ~/build/test/integration/export -cz fixtures > evmone-tests.tar.gz
      - package

  release-windows:
    executor: win/server-2022
    environment:
      CMAKE_BUILD_TYPE: Release
      CMAKE_BUILD_PARALLEL_LEVEL: 4
    steps:
      - checkout
      - checkout_submodules
      - run:
          name: "Setup environment (bash)"
          shell: bash
          command: |
            echo 'export PATH=$PATH:"/c/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin"' >> $BASH_ENV
      - run:
          name: 'Configure'
          shell: powershell
          command: |
            $ErrorActionPreference = "Stop"
            & 'C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\Tools\Launch-VsDevShell.ps1' -Arch amd64
            which cmake
            cmake -S . -B ~/build -G Ninja -DCMAKE_INSTALL_PREFIX=C:\install -DEVMONE_TESTING=ON
      - run:
          name: 'Build'
          shell: powershell
          command: |
            $ErrorActionPreference = "Stop"
            & 'C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\Tools\Launch-VsDevShell.ps1' -Arch amd64
            cmake --build ~/build
      - test
      - package

  release-macos:
    executor: macos
    environment:
      BUILD_TYPE: Release
    steps:
      - run:
          name: "Install System Dependencies"
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install cmake
      - build
      - test
      - package

  deploy:
    docker:
      - image: circleci/golang
    steps:
      - run:
          name: "Install GHR"
          command: |
            GO111MODULE=on go get github.com/tcnksm/ghr@v0.12.1
      - attach_workspace:
          at: ~/package
      - run:
          name: "Create GitHub release"
          command: |
            ls -l ~/package
            prerelease_flag=$([[ $CIRCLE_TAG =~ ^v[0-9\.]+$ ]] || echo '-prerelease')
            name="$CIRCLE_PROJECT_REPONAME ${CIRCLE_TAG:1}"
            echo $name
            ghr -u $CIRCLE_PROJECT_USERNAME -r $CIRCLE_PROJECT_REPONAME -n "$name" $prerelease_flag $CIRCLE_TAG ~/package

  # TODO(now.youtrack.cloud/issue/TE-8)
  blockchain-tests:
    executor: blockchain-tests
    environment:
      BUILD_TYPE: Coverage
      CMAKE_OPTIONS: -DEVMONE_TESTING=OFF -DCMAKE_CXX_FLAGS=-Og
    steps:
      - build
      - build_silkworm:
          commit: 30ca8b324fcffb574c23c09fcba6386e57a7a5af
      - download_execution_tests:
          rev: v12.2
      - run:
          name: "Silkworm-driven blockchain tests (Advanced)"
          working_directory: ~/build
          no_output_timeout: 20m
          command: ~/silkworm/consensus --evm lib/libevmone.so,advanced --tests ~/tests --threads $CMAKE_BUILD_PARALLEL_LEVEL
      - run:
          name: "Silkworm-driven blockchain tests (Baseline)"
          working_directory: ~/build
          no_output_timeout: 20m
          command: ~/silkworm/consensus --evm lib/libevmone.so --tests ~/tests --threads $CMAKE_BUILD_PARALLEL_LEVEL
      - collect_coverage_gcc
      # - upload_coverage:
      #     flags: blockchaintests

  # TODO(now.youtrack.cloud/issue/TE-8)
  state-tests:
    executor: blockchain-tests
    environment:
      BUILD_TYPE: Coverage
      CMAKE_OPTIONS: -DCMAKE_CXX_FLAGS=-Og
    steps:
      - build
      - download_execution_tests:
          rev: v12.2
      - run:
          name: "State tests"
          working_directory: ~/build
          command: |
            export EVMONE_PRECOMPILES_STUB=~/project/test/state/precompiles_stub.json 
            # TODO(now.youtrack.cloud/issue/TE-7)
            bin/evmone-statetest ~/tests/GeneralStateTests ~/tests/LegacyTests/Constantinople/GeneralStateTests
      - collect_coverage_gcc
      # - upload_coverage:
      #     flags: statetests

  gcc-min:
    executor: linux-gcc-min
    steps:
      - build
      - test

  clang-min:
    executor: linux-clang-min
    environment:
      CMAKE_OPTIONS=-DEVMONE_X86_64_ARCH_LEVEL=3
    steps:
      - build
      - test


  gcc-latest-coverage:
    executor: linux-gcc-latest
    environment:
      BUILD_TYPE: Coverage
      TESTS_FILTER: unittests|integration
    steps:
      - build
      - test
      - collect_coverage_gcc
      # - upload_coverage:
      #     flags: unittests

  gcc-latest-memcheck:
    executor: linux-gcc-latest
    environment:
      BUILD_TYPE: Debug
      CMAKE_OPTIONS: -DCMAKE_CXX_FLAGS=-O1
    steps:
      - build
      - test
      - run:
          name: "memcheck"
          working_directory: ~/build
          command: valgrind --vgdb=no --error-exitcode=99 bin/evmone-unittests

  gcc-32bit:
    executor: linux-gcc-multilib
    environment:
      TOOLCHAIN: cxx17-32bit
    steps:
      - build
      - test

  clang-latest-sanitizers:
    executor: linux-clang-xlarge
    environment:
      CMAKE_OPTIONS: -DBUILD_SHARED_LIBS=NO -DSANITIZE=address,undefined,shift-exponent,implicit-conversion,nullability
      UBSAN_OPTIONS: halt_on_error=1
    steps:
      - build
      - test

  clang-tidy:
    executor: linux-clang-2xlarge
    environment:
      CMAKE_OPTIONS: -DCMAKE_CXX_CLANG_TIDY=clang-tidy -DCMAKE_CXX_FLAGS=-g0
      BUILD_TYPE: Debug
    steps:
      - build

  clang-latest-coverage:
    executor: linux-clang-latest
    resource_class: small
    environment:
      CMAKE_BUILD_PARALLEL_LEVEL: 2
      BUILD_TYPE: Coverage
      TESTS_FILTER: unittests|integration
    steps:
      - build
      - test
      - run:
          name: "Coverage report"
          working_directory: ~/build
          command: |
            ARGS='lib/libevmone.so -Xdemangler llvm-cxxfilt -instr-profile=evmone.profdata -ignore-filename-regex=include/evmc'
            SHOW_ARGS='-format=html -show-branches=count -show-regions -show-expansions'
            
            mkdir ~/coverage
            llvm-profdata merge -sparse *.profraw -o evmone.profdata
            llvm-cov show $ARGS $SHOW_ARGS > ~/coverage/full.html
            llvm-cov show $ARGS $SHOW_ARGS -region-coverage-lt=100 > ~/coverage/missing.html

            llvm-cov report $ARGS > ~/coverage/report.txt
            llvm-cov report $ARGS -use-color
      - store_artifacts:
          path: ~/coverage
          destination: coverage
  # TODO(now.youtrack.cloud/issue/TE-8)
  fuzzing:
    executor: linux-clang-xlarge
    environment:
      CMAKE_OPTIONS: -DEVMONE_FUZZING=ON
    steps:
      - build
      - restore_cache:
          name: "Restore fuzzing corpus"
          key: fuzzing-corpus
      - run:
          name: "Run evmone-fuzzer"
          working_directory: ~/build
          command: |
            bin/evmone-fuzzer -runs=5000000 -fork=$CMAKE_BUILD_PARALLEL_LEVEL -fork_corpus_groups=1 ~/corpus -create_missing_dirs=1 -max_len=100 -entropic_scale_per_exec_time=1 2>&1 | sed '/NEW_FUNC/d'
      - save_cache:
          name: "Save fuzzing corpus"
          key: fuzzing-corpus-{{epoch}}
          paths:
            - ~/corpus

  macos-asan:
    executor: macos
    environment:
      BUILD_TYPE: RelWithDebInfo
      CMAKE_OPTIONS: -DSANITIZE=address,undefined
      TESTS_FILTER: unittests
    steps:
      - run:
          name: "Install System Dependencies"
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install cmake
      - build
      - test

  xcode-min:
    executor: macos-xcode-min
    steps:
      - run:
          name: "Install System Dependencies"
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install cmake
      - build
      - test

  cmake-min:
    executor: linux-base
    steps:
      - install_cmake:
          version: 3.18.4
      - build
      - test

  x86-64-v1:
    executor: linux-gcc-latest
    environment:
      BUILD_TYPE: Release
      QEMU_CPU: core2duo  # The lowest 64-bit CPU I could find, but qemu64 should be good too.
    steps:
      - build
      - run:
          name: "Check evmone.so"
          working_directory: ~/build
          command: (! qemu-x86_64-static bin/evmc run --vm ./lib/libevmone.so,trace 6000 2>&1) | grep "CPU does not support"
      - run:
          name: "Check unittests"
          working_directory: ~/build
          command: (! qemu-x86_64-static bin/evmone-unittests 2>&1) | grep "CPU does not support"



workflows:
  version: 2
  evmone:
    jobs:
      - lint
      - clang-tidy
      - release-linux:
          filters:
            tags:
              only: /.*/
      - release-windows:
          filters:
            tags:
              only: /.*/
      - release-macos:
          filters:
            tags:
              only: /.*/
      - deploy:
          requires:
            - release-linux
            - release-windows
            - release-macos
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9].*/
      #- state-tests
      #- blockchain-tests
      - cmake-min
      - gcc-min
      - clang-min
      - gcc-latest-coverage
      - gcc-latest-memcheck
      - clang-latest-sanitizers
      - clang-latest-coverage
      - macos-asan
      - xcode-min
      - gcc-32bit
      - x86-64-v1
      - fuzzing